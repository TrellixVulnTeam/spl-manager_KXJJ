# TESTING STANDARDIZATION AND AUTOMATION CONFIGURATION
# ---------------------------------------------------------
# Copyright (C) 2020 Nextpart Security Intelligence GmbH
# All rights reserved. - Proprietary and confidential

[main]
module = spl


[tox]
envlist = py38, package, lint, clean # , py27, py35, py36, py37, py39, docs, ...
isolated_build = False
minversion = 3.3.0
skipsdist = True



[flake8]
docstring_convention = google
docstring_style = sphinx
exclude = .git,__pycache__,docs/source/conf.py,old,build,dist
ignore =     E800, # Found commented out code
    S101, # Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
    W503, # line break before binary operator
    ANN101, # Missing type annotation for self in method
    ANN002, # Missing type annotation for *args
    ANN003, # Missing type annotation for **kwargs
    ANN102, # Missing type annotation for cls in classmethod
ignore-directives = panels,
    tabbed,
    mdinclude,
    dropdown,
    link-button,
    needtable,
    doctest,
    needflow,
    req,
    spec,
    impl,
    test,
    test-report


max-complexity = 12
max-doc-length = 100
max-line-length = 100
strictness = short
suppress-none-returning = True


[testenv]
skip_install = True
allowlist_externals =
    poetry
    bash
extras = build

[testenv:clean]
commands = poetry run coverage erase
depends = testenv
deps = coverage[toml]
skip_install = True


[testenv:lint]
commands =
    poetry run isort .
    poetry run black .
    ; poetry run mypy {[main]module}
    poetry run pylint {[main]module} --disable=duplicate-code,protected-access,logging-fstring-interpolation,redefined-builtin --extension-pkg-whitelist='pydantic'
    poetry run flake8 {[main]module}
    ; poetry run mypy tests
    ; poetry run pylint tests --disable=protected-access,duplicate-code
    ; poetry run flake8 tests
    poetry run safety check
deps =
    isort
    typed-ast
    flake8-fixme # Check for FIXME, TODO and other temporary developer notes.
    ; flake8-annotations # Presence of type annotations in function definitions.
    ; darglint # Check that the docstring description matches the definition.
    flake8-markdown # Lints Python code blocks in Markdown files using flake8.
    flake8-rst # Checks on code in *.rst files or in docstrings.
    flake8-docstrings # Include checks provided by pep257.
    flake8-rst-docstrings # Validate Python docstrings as reStructuredText (RST).
    flake8-alfred # Alfred is a flake8 plugin to warn on unsafe/obsolete symbols
    flake8-bugbear # Finding likely bugs and design problems in your program
    flake8-builtins # Check for python builtins being used as variables or parameters.
    flake8-comprehensions # Helps you write better list/set/dict comprehensions.
    flake8-eradicate # Plugin to find commented out or dead code.
    flake8-simplify # Plugin that helps you to simplify code.
    flake8-bandit # Automated security testing using bandit.
    flake8-mock # Provides checking mock non-existent methods.
    mypy
    safety

[testenv:package]
deps = twine
commands = poetry build
    poetry run python3 -m twine check dist/*
skip_install = True


[testenv:docs]
commands =
    bash -c "if [ ! -f 'docs/conf.py' ] ; then poetry run pip install -r ../../docs/requirements.txt ; DOCPWD=`pwd` poetry run sphinx-build -b html -d {envtmpdir}/doctrees . -c ../../docs {envtmpdir}/html ; DOCPWD=`pwd` poetry run sphinx-build -b doctest -d {envtmpdir}/doctrees . -c ../../docs {envtmpdir}/html ; else poetry run pip install -r ./docs/requirements.txt ; poetry run sphinx-build -b html -d {envtmpdir}/doctrees . -c docs {envtmpdir}/html ; poetry run sphinx-build -b doctest -d {envtmpdir}/doctrees . -c docs {envtmpdir}/html ; fi;"
skip_install = True
